/**
 * This class holds configuration options that can be changed using the XML
 * parser class and called using the configuration name.
 */


// -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*-
#ifndef __CONFIG__H
#define __CONFIG__H

#include <string>
#include <iostream>

class Config
{
public:

	/**
	Default Constructor

	@return a blank Config object which is ready to take values.
	*/
	Config();

	/**
	 Default Destructor
	*/
	~Config();

	/*
	*	getName
	*	@return the name of the setup that need will be using by the rest of the program.
	*/
	std::string getName();

	/*
	*	getC
	*	@return the speed of sound in meters per second.
	*/
	double getC();

	/*
	*	getMicDistance
	*	@return the distance between the two most distance microphones in meters.
	*/
	double getMicDistance();

	/*
	*	getSamplingRate
	*	@return the numbers of samples that are recorded within 1 second by the microphones.
	*/
	int getSamplingRate();

	/*
	*	getNMics
	*	@return the number of Microphones that are being using in the experiment.
	*/
	int getNMics();

	/*
	*	getNBands
	*	@return the number of bands are to be generated by the gammaton filter bank and used by the rest of the program.
	*/
	int getNBands();

	/*
	*	getFrameDurationSamples
	*	@return the number of samples that are recording by the microphones in each frame of data.
	*/
	int getFrameDurationSamples();

	/*
	* getFrameDurationSeconds
	*	@return the time that each frame elapses measured in seconds.
	*/
	int getFrameDurationSeconds();

	/**
	 * getRequiredLagFrames
	 *
	 * In some cases it may be nessary to impose a lag behind real time.
	 *
	 * @return the number of frames to lag behind in real time.
	 */
	int getRequiredLagFrames();

	/*
	*	getNumFramesInBuffer
	*
	* @return the size of echoic memory.
	*/
	int getNumFramesInBuffer();
	/*
	*	@return the number of beams that can be created by the beam former using the parasites
	*	presented above in either the left or the right Hemifield.
	*/
	int getNBeamsPerHemifield();

	/**
	 * getNBeams
	 *
	 * @return the total number of beams that can be created by the beam forming algorithm.
	 */
	int getNBeams();

	/**
	 * getLags
	 *
	 * @return the lag between each beam measured in seconds.
	 */
	int getLags();

	/**
	 * getAngles
	 *
	 * @return the angles which correspond to each beam that is created using the beam former.
	 */
	double getAngles();

	/**
	 * getLowCf
	 *
	 * @return the lowest frequency that is to be using by the gammaton filter bank measured in Hz.
	 */
	int getLowCf();

	/**
	 * getHighCf
	 *
	 * @return the highest frequency that is to be using by the gammaton filter bank measured in Hz.
	 */
	int getHighCf();

	/**
	 * getFrameOverlap
	 *
	 * @return the indices of the "core" frame inside the grabbed audio data
	 */
	int getFrameOverlap();

	/**
	 * getFramePlusOverlap
	 *
	 * @return the total size of the chunk of data we need to pull out of the buffer each time we read it
	 */
	int getFramePlusOverlap();

	/**
	 * [getFrameIndicies description]
	 * @return [description]
	 */
	int getFrameIndicies();

	/**
	 * [getNPastSeconds description]
	 * @return [description]
	 */
	int getNPastSeconds();

	/**
	 * [getNPastFrames description]
	 * @return [description]
	 */
	int getNPastFrames();

	/**
	 * [getAttentionCaptureThreshold description]
	 * @return [description]
	 */
	int getAttentionCaptureThreshold();
	/**
	 * [getInhibitionOfCapture description]
	 * @return [description]
	 */
	int getInhibitionOfCapture();
	/**
	 * [getRadialResolutionDegrees description]
	 * @return [description]
	 */
	double getRadialResolutionDegrees();
	/**
	 * [getRadialResolutionRadians description]
	 * @return [description]
	 */
	double getRadialResolutionRadians();

	/**
	 * [getNumSpaceAngles description]
	 * @return [description]
	 */
	int getNumSpaceAngles();

	/**
	 * [getFrameSamples description]
	 * @return [description]
	 */
	int getFrameSamples();

	/**
	 * [getInterpellateNSamples description]
	 * @return [description]
	 */
	int getInterpellateNSamples();


	/**
	 * Sets the configuration name. This will be used when storing multiple
	 * configureations.
	 *
	 * @param std::string Name of configuration. ie. icub
	 */
	void setName(std::string);

	/**
	 * [setC description]
	 * @param double [description]
	 */
	void setC(double);

	/**
	 * setMicDistance
	 * @param double Sets the distance between the two most distance microphones in meters.
	 */
	void setMicDistance(double);

	/**
	 * setSamplingRate
	 * @param int Takes the numbers of samples that are recorded within 1 second by the microphones.
	 */
	void setSamplingRate(int);

	/**
	 * setNMics
	 * @param int Sets the number of Microphones that are being using in the experiment.
	 */
	void setNMics(int);

	/**
	 * setNBands
	 * @param int Sets the number of bands are to be generated by the gammaton filter bank and used by the rest of the program.
	 */
	void setNBands(int);

	/**
	 * [setRequiredLagFrames description]
	 * @param int [description]
	 */
	void setRequiredLagFrames(int);

	/**
	 * [setNumFramesInBuffer description]
	 * @param int [description]
	 */
	void setNumFramesInBuffer(int);

	/**
	 * [setLowCf description]
	 * @param int [description]
	 */
	void setLowCf(int);

	/**
	 * [setHighCf description]
	 * @param int [description]
	 */
	void setHighCf(int);

	/**
	 * setFrameOverlap
	 *
	 * this gets a bit confusing: we need to pull enough data so we can run beamformer lags *past* the end of each frame
	 *
	 * @param int takes the overlap into the next frame
	 */
	void setFrameOverlap(int);

	/**
	 * setNPastSeconds
	 *
	 * @param int in seconds; how much time over which to integrate previous events
	 */
	void setNPastSeconds(int);

	/**
	 * setAttentionCaptureThreshold
	 *
	 * @param int sets a minimum salience that must be exceeded for attention to be captured...this is environment sensitive and must be tuned
	 */
	void setAttentionCaptureThreshold(int);

	/**
	 * setRadialResolutionDegrees
	 * @param double degrees per possible head direction
	 */
	void setRadialResolutionDegrees(double);

	/**
	 * TODO check
	 *
	 * setFrameSamples
	 *
	 * @param int sets the number of samples for each frame
	 */
	void setFrameSamples(int);

	/**
	 * setInterpellateNSamples
	 *
	 * @param int sets the required amount of interpellated samples
	 */
	void setInterpellateNSamples(int);

	/**
	 * Calls all parameters that require any form of calculation.
	 * This module makes sure that all operation are called in the correct order.
	 */
	void calculate();

	/*
	*	Prints all the variables that are loaded in to the screen.
	*/
	void printVariables();

	/**
	 * setPhaseAlign
	 * @param std::string [description]
	 */
	void setPhaseAlign(std::string);

	/**
	 * [getPhaseAlign description]
	 * @return [description]
	 */
	bool getPhaseAlign();

private:
	std::string name;
	double C;
	double micDistance;
	int samplingRate;
	int nMics;
	int nBands;
	int frameSamples;
	int interpellateNSamples;

	int frameDurationSamples; //divide by sample rate to get frame duration, make it evenly divisible by the frame size of the audio capture, at least as big as the frame size of audio capture, and (ideally) a power of 2

	/**
	 * Private Function. Use calculate()
	 *
	 * setFrameDurationSamples
	 *
	 * @param int divide by sample rate to get frame duration, make it evenly
	 * divisible by the frame size of the audio capture, at least as big as
	 *  the frame size of audio capture, and (ideally) a power of 2.
	 *
	 */
	void setFrameDurationSamples(int);

	int frameDurationSeconds;

	/**
	 * setFrameDurationSeconds
	 *
	 * Private function. Use calculate() after setting frameDurationSamples and sampleRate
	 *
	 */
	void setFrameDurationSeconds();

	int requiredLagFrames;
	int numFramesInBuffer;

	int nBeamsPerHemifield;

	/**
	 * setNBeamsPerHemifield
	 *
	 * Private function. Use calculate()
	 */
	void setNBeamsPerHemifield();

	int nBeams;

	/**
	 * setNBeams
	 *
	 * Private function. Use calculate() after setting nBeamsPerHemifield.
	 */
	void setNBeams();
	int lags;

	/**
	 * setLags
	 *
	 * TODO still need this?
	 */
	void setLags();
	double angles;

	/**
	 * setAngles
	 *
	 * TODO remove?
	 *
	 */
	void setAngles();

	int lowCf;
	int highCf;
	int frameOverlap;
	int framePlusOverlap;

	/**
	 * setframePlusOverlap
	 *
	 *
	 */
	void setframePlusOverlap();
	int frameIndices;
	void setFrameIndicies();
	int nPastSeconds;
	int nPastFrames;

	/**
	 * [setNPastFrames description]
	 */
	void setNPastFrames();
	int attentionCaptureThreshold;
	int inhibitionOfCapture;

	/**
	 * [setInhibitionOfCapture description]
	 */
	void setInhibitionOfCapture();

	double radialResolutionDegrees;
	double radialResolutionRadians;

	/**
	 * [setRadialResolutionRadians description]
	 */
	void setRadialResolutionRadians();
	int numSpaceAngles;

	/**
	 * [setNumSpaceAngles description]
	 */
	void setNumSpaceAngles();
	bool phaseAlign;



};


#endif
