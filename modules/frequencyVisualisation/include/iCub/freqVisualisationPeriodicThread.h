// -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*-

/*
 * Copyright (C) 2019 Department of Neuroscience - University of Lethbridge
 * Author: Austin Kothig, Francesco Rea, Marko Ilievski, Matt Tata
 * email: kothiga@uleth.ca, francesco.reak@iit.it, marko.ilievski@uwaterloo.ca, matthew.tata@uleth.ca
 * 
 * Permission is granted to copy, distribute, and/or modify this program
 * under the terms of the GNU General Public License, version 2 or any
 * later version published by the Free Software Foundation.
 *
 * A copy of the license can be found at
 * http://www.robotcub.org/icub/license/gpl.txt
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details
*/

/* ===========================================================================
 * @file  freqVisualisationPeriodicThread.h
 * @brief Definition of a periodic thread that receives yarp matrices 
 *          from an input port and converts the values to an image object.
 * =========================================================================== */

#ifndef _FREQ_VISUALISATION_PERIODICTHREAD_H_
#define _FREQ_VISUALISATION_PERIODICTHREAD_H_

#include <iostream>
#include <cstring>
#include <fstream>
#include <time.h>
#include <cv.h>
#include <highgui.h>

#include <yarp/math/Math.h>
#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/dev/all.h>
#include <yarp/os/PeriodicThread.h>
#include <yarp/os/Log.h>

typedef yarp::sig::Matrix                        yMatrix;
typedef yarp::sig::ImageOf<yarp::sig::PixelRgb>  yImgRgb;

class FreqVisualisationPeriodicThread : public yarp::os::PeriodicThread {

  private:

    bool result;                //-- Result of the processing.

	std::string name;           //-- Rootname of all the ports opened by this thread.
	std::string robot;          //-- Name of the robot.
	std::string configFile;     //-- Name of the configFile where the parameter of the camera are set.
	std::string inputPortName;  //-- Name of input port for incoming events, typically from aexGrabber.

    int  imageOutHeight;        //-- Output height of image.
    int  imageOutWidth;         //-- Output width of image.
    int  visGain;               //-- Boosts the values of the matrix.
    int  grid;                  //-- Grid visualisation: 0-none, 1-hor, 2-vert.
	bool transpose;             //-- Transpose the matrix prior to visualising.

    yImgRgb* tmpImage;          //-- tmpImage generated by the processing.
    yImgRgb* inputImage;        //-- Input image from the inputPort.
    yImgRgb* outputImage;       //-- Output image published to outputPort.

	/* ===========================================================================
	 *  Yarp Ports for Sending and Receiving Data from this Periodic Thread.
	 * =========================================================================== */
    yarp::os::BufferedPort<yMatrix>  inputPort; 
    yarp::os::BufferedPort<yImgRgb>  outputPort;
    

  public:

    /* ===========================================================================
	 *  Default Constructor.
	 * =========================================================================== */
    FreqVisualisationPeriodicThread();


    /* ===========================================================================
	 *  Main Constructor.
	 * 
	 * @param robotname  : Name of the robot.
	 * @param configFile : Path to the .ini configuration file.
	 * =========================================================================== */
	FreqVisualisationPeriodicThread(std::string robotname,std::string configFile);


    
	/* ===========================================================================
	 *  Destructor.
	 * =========================================================================== */
	~FreqVisualisationPeriodicThread();

    
	/* ===========================================================================
	 *  Configure all the parameters and return true if successful.
	 * 
	 * @param rf : Reference to the resource finder.
	 * 
	 * @return Flag for the success.
	 * =========================================================================== */
	bool configure(yarp::os::ResourceFinder &rf);


	/* ===========================================================================
	 *  Initialises the thread. Build tables and open ports.
	 * =========================================================================== */
	bool threadInit();

    
	/* ===========================================================================
	 *  Correctly releases the thread.
	 * =========================================================================== */
	void threadRelease();


	/* ===========================================================================
	 *  Function that sets the rootname of all the ports 
	 *    that are going to be created by the thread.
	 * 
	 * @param str : rootname.
	 * =========================================================================== */
	void setName(std::string str);


	/* ===========================================================================
	 *  Function that returns the original root name and 
	 *    appends another string iff passed as parameter.
	 * 
	 * @param p : pointer to the string that has to be added.
	 * 
	 * @return rootname + appended string.
	 * =========================================================================== */
	std::string getName(const char* p);


	/* ===========================================================================
	 *  Function that sets the inputPort name.
	 * =========================================================================== */
	void setInputPortName(std::string inpPrtName);


    /* ===========================================================================
	 *  Active part of the thread.
	 * =========================================================================== */
	void run(); 

	
	/* ===========================================================================
	 *  Method for the processing in the PeriodicThread.
	 * =========================================================================== */
	bool processing();
	bool processing(yarp::sig::Matrix *mat);
	bool processing(yarp::os::Bottle  *b);

    
    /* ===========================================================================
     *  Function that sets the gain for the image.
     * =========================================================================== */
    void setGain(int inGain);


    /* ===========================================================================
     *  Function that sets the visualisation grid.
	 * =========================================================================== */
    void setGrid(std::string grid);


	/* ===========================================================================
     *  Function that sets if the image should be transposed.
	 * =========================================================================== */
	void setTranspose(bool trans);
    

    /* ===========================================================================
     *  Method for the use of opencv functions.
     * =========================================================================== */
    bool addLegend();
};

#endif  //_FREQ_VISUALISATION_PERIODICTHREAD_H_

//----- end-of-file --- ( next line intentionally left blank ) ------------------
